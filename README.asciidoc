== Self Signed Certificated trust test

This repo contains a test for verifying Server key/certificates pairs along with corresponding CA Bundles.

The test outlines different behavior between the TLS stack from Golang and OpenSSL. The difference is important when considering
Rootless Certificate Chains.

=== Interesting test results

The most interesting test case is the one mentioned below:

```
{
    // This is a bit counterintuitive. The Leaf certificate is signed by the Intermediary, which
    // is signed by CA. The Client has only CA in his hands, therefore it doesn't know anything about
    // the intermediary. The only way to verify this scenario is to put both Intermediary.crt and CA.crt
    // into the Trust Bundle (see the testcase below).
    // Bonus point: You can verify this using openssl:
    //   openssl verify -CAfile ./generated/Trustbundle_CA.crt ./generated/Leaf_signed_by_Intermediary.crt
    //   CN = delta
    //   error 20 at 0 depth lookup: unable to get local issuer certificate
    //   error ./generated/Leaf_signed_by_Intermediary.crt: verification failed
    name: "Server[Leaf signed by Intermediate] Client[CA] => shouldn't connect",
    args: args{
        ServerKey:          "certs/generated/Leaf_signed_by_Intermediary.key",
        ServerCert:         "certs/generated/Leaf_signed_by_Intermediary.crt",
        ClientTrustBundle:  "certs/generated/Trustbundle_CA.crt",
        shouldConnect:      false,
        isValidWithOpenSSL: false,
    },
},
```

```
{
    // This is the most interesting case. We use the Intermediary cert without the root.
    // Since the intermediary is CA, this is fine for Golang TLS stack.
    // However, this fails with OpenSSL:
    // CN = bravo
    // error 2 at 1 depth lookup: unable to get issuer certificate
    // error certs/generated/Leaf_signed_by_Intermediary.crt: verification failed
    // OpenSSL requires a Full Certificate Chain by default.
    name: "Server[Leaf signed by Intermediate] Client[Intermediary Rootless] => should connect",
    args: args{
        ServerKey:         "certs/generated/Leaf_signed_by_Intermediary.key",
        ServerCert:        "certs/generated/Leaf_signed_by_Intermediary.crt",
        ClientTrustBundle: "certs/generated/Trustbundle_Intermediary_Full_Chain_Rootless.crt",
        shouldConnect:     true,
        isValidWithOpenSSL: false,
    },
},
```